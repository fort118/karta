/**
 * Converts a snake-case string to camelCase
 *
 * @param {string} str kebab-cased string
 * @returns {string} camelCased string
 */
export function kebabToCamelCase(str: string): string;
/**
 * Converts a camelCase string to kebab-case
 *
 * @param {string} str camelCased string
 * @returns {string} kebab-cased string
 */
export function camelToKebabCase(str: string): string;
/**
 * Takes attributes from element and creates an object
 * with the keys camelCased.
 *
 * @param {NamedNodeMap} attributes Element.attributes
 * @returns {object} Object with camelCased keys
 */
export function attributesToObject(attributes: NamedNodeMap): object;
/**
 * Converts a string of HTML into nodes.
 *
 * @param {string} string HTML in string form
 * @returns {DocumentFragment} Nodes parsed from the HTML string
 */
export function stringToElements(string: string): DocumentFragment;
/**
 * @param {string[] | string} strings
 * @param {any[]} rest
 * @returns {CSSStyleSheet}
 */
export function modernCSS(...args: any[]): CSSStyleSheet;
/**
 * @param {string[] | string} strings
 * @param {any[]} rest
 * @returns {HTMLStyleElement}
 */
export function oldCSS(...args: any[]): HTMLStyleElement;
/**
 * @param {string[] | string} strings
 * @param {any[]} rest
 * @returns {CSSStyleSheet}
 */
export function css(strings: string[] | string, ...rest: any[]): CSSStyleSheet;
/**
 * @export
 * @param {string[] | string} strings
 * @param {any[]} rest
 * @returns {DocumentFragment}
 */
export function html(...args: any[]): DocumentFragment;
